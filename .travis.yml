---
sudo: required
dist: bionic

notifications:
  slack:
    on_failure: always

matrix:
  fast_finish: true
  include:

#====================Protractor E2E ========================================================

    # https://github.com/jimCresswell/cucumber-with-protractor-demo.git
    - name: "Protractor E2E Cucumber BDD Gherkin DSL on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: ruby
      # python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git https://github.com/jimCresswell/cucumber-with-protractor-demo.git
        - cd cucumber-with-protractor-demo && npm install
        - node server.js && curl http://localhost:3000/app/index.html.
        - npm install -g gulp
        - npm install -g karma-cli
      after_success:
        - deactivate

#====================Gherkin Cucumber BDD Selenium Gradlew ========================================================

    # https://github.com/narottamgla/selenium-cucumber4-demo.git
    - name: "Selenium WebDriver Cucumber BDD Serenity BDD on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: ruby
      # python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/narottamgla/selenium-cucumber4-demo
        - cd selenium-cucumber4-demo
        - CucumberTestSuite
        - mvn verify
        - gradle test
        - mvn clean verify -Ddriver=firefox #By default, the tests will run using Chrome
        - gradle clean test -Pdriver=firefox
        - mvn clean verify -Denvironment=staging
      after_success:
        - deactivate

    # https://github.com/viktorolesn/automation-practice-demo.git
    - name: "Java, Selenium WebDriver Maven TestNG Cucumber BDD Gherkin DSL on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: ruby
      # python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/viktorolesn/automation-practice-demo.git
        - cd automation-practice-demo && mvn test
      after_success:
        - deactivate

    # https://github.com/AndreasAugustin/Gherkin-Demos-cpp.git
    - name: "Ruby Gherkin Cucumber Demo Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: ruby
      # python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/AndreasAugustin/Gherkin-Demos-cpp.git
        - cd cpp && mkdir build && cd build
        - cmake ..
        - make
        - cd devel/lib/soundex/test && ./FeatureShowcaseSteps &
      after_success:
        - deactivate

    # https://github.com/AndreasAugustin/Gherkin-Demos-ruby.git
    - name: "Ruby Gherkin Cucumber Demo Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: ruby
      # python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/AndreasAugustin/Gherkin-Demos-ruby.git
        - cd Gherkin-Demos-ruby && bundle
        - cd ruby/tests/ && cucumber
      after_success:
        - deactivate

    # https://github.com/AndreasAugustin/Gherkin-Demos-java.git
    - name: "Java Gherkin Demo Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/AndreasAugustin/Gherkin-Demos-java.git
        - cd java && mvn test
      after_success:
        - deactivate

    # https://github.com/viktorolesn/api-testing-demo.git
    - name: "JAPI-testing using Maven, TestNG, Cucumber and Gherkin Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/viktorolesn/api-testing-demo.git
        - cd api-testing-demo && mvn test
      after_success:
        - deactivate

    # https://github.com/bullboa/cucumber-for-java-demo.git
    - name: "Java Maven Cucumber Gherkin Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/bullboa/cucumber-for-java-demo.git
        - cd cucumber-for-java-demo && mvn test
      after_success:
        - deactivate

    # https://github.com/acmthinks/hellocuke.git
    - name: "Java Maven Cucumber Gherkin Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/acmthinks/hellocuke.git
        - cd hellocuke && mvn test
      after_success:
        - deactivate


    # https://github.com/AndreasAugustin/Gherkin-Demos-python.git
    - name: "Python Gherkin Demo Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/AndreasAugustin/Gherkin-Demos-python.git
        - cd Gherkin-Demos-python && pip install -r requirements.txt
        - behave ./test/features/
      after_success:
        - deactivate

    # https://github.com/7ep/demo.git
    - name: " Gherkin Cucumber BDD Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/7ep/demo.git
        - javac -version
        - echo $PATH
        - ./gradlew check
        - ./gradlew apprun
        - curl http://localhost:8080/demo
        - ./gradlew runAllTests
      after_success:
        - deactivate

#====================Gradle Maven Builds========================================================
    # https://github.com/DanySK/Gravis-CI.git
    - name: "Installing Python on bionic"
      dist: bionic
      env:
        global:
          # Convenience variables for shortening commands
          - GRAVIS_REPO="https://github.com/DanySK/Gravis-CI.git"
          - GRAVIS="$HOME/gravis"
        matrix:
        # List any Python version you want to run with
        - PYTHON="2.7.0"
        - PYTHON="3.6.0"
        # Partial matches allowed: pick the last matching
        - PYTHON="3"
        # Latest stable
        - PYTHON=""
      # services:
      #   - docker
      # addons:
      #   snaps:
      #     - name: microk8s
      #       confinement: classic # or devmode
      #       channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt  
        - travis_retry git clone --depth 1 $GRAVIS_REPO $GRAVIS      
        - source $GRAVIS/install-python
      before_cache: #Better Gradle caching
        - $GRAVIS/clean-gradle-cache        
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
          #Caching the JDK
          # This avoids re-downloading the JDK every time, but Travis recommends not to do it
          - $HOME/.jabba/
      # script:
        # - git clone https://github.com/superkojiman/pwnbox.git
        # - docker pull superkojiman/pwnbox
        # - ./run.sh defcon
        # - ./run.sh 
      after_success:
        - deactivate


    # https://github.com/DanySK/Gravis-CI.git
    - name: " Installing Apache Maven  Python 3.7 on bionic"
      dist: bionic
      env:
        global:
          # Convenience variables for shortening commands
          - GRAVIS_REPO="https://github.com/DanySK/Gravis-CI.git"
          - GRAVIS="$HOME/gravis"
        matrix:
        - MAVEN_VERSION="3.6.3"
        - MAVEN_VERSION="3.6.0"
      # services:
      #   - docker
      # addons:
      #   snaps:
      #     - name: microk8s
      #       confinement: classic # or devmode
      #       channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt  
        - travis_retry git clone --depth 1 $GRAVIS_REPO $GRAVIS      
        - source $GRAVIS/install-jdk
        - source $GRAVIS/install-maven
      before_cache: #Better Gradle caching
        - $GRAVIS/clean-gradle-cache        
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
          #Caching the JDK
          # This avoids re-downloading the JDK every time, but Travis recommends not to do it
          - $HOME/.jabba/
      # script:
        # - git clone https://github.com/superkojiman/pwnbox.git
        # - docker pull superkojiman/pwnbox
        # - ./run.sh defcon
        # - ./run.sh 
      after_success:
        - deactivate


    # https://github.com/DanySK/Gravis-CI.git
    - name: " Installing the JDK  Python 3.7 on bionic"
      dist: bionic
      env:
        global:
          # Convenience variables for shortening commands
          - GRAVIS_REPO="https://github.com/DanySK/Gravis-CI.git"
          - GRAVIS="$HOME/gravis"
        matrix:
        - JDK="adopt@1.8.212-04"
        - JDK="adopt-openj9@1.11
      # services:
      #   - docker
      # addons:
      #   snaps:
      #     - name: microk8s
      #       confinement: classic # or devmode
      #       channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt  
        - travis_retry git clone --depth 1 $GRAVIS_REPO $GRAVIS      
        - source $GRAVIS/install-jdk
      before_cache: #Better Gradle caching
        - $GRAVIS/clean-gradle-cache
      cache:
        directories:
          - $HOME/.gradle/caches/
          - $HOME/.gradle/wrapper/
          #Caching the JDK
          # This avoids re-downloading the JDK every time, but Travis recommends not to do it
          - $HOME/.jabba/
      # script:
        # - git clone https://github.com/superkojiman/pwnbox.git
        # - docker pull superkojiman/pwnbox
        # - ./run.sh defcon
        # - ./run.sh 
      after_success:
        - deactivate

#====================Binary Reversing========================================================
    # https://github.com/superkojiman/pwnbox.git
    - name: " pwnbox Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/superkojiman/pwnbox.git
        - docker pull superkojiman/pwnbox
        - ./run.sh defcon
        - ./run.sh 
      after_success:
        - deactivate

    # https://github.com/programa-stic/barf-project.git
    - name: " BARF Binary Analysis and Reverse engineering Framework Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/programa-stic/barf-project.git
        - sudo python setup.py install
      after_success:
        - deactivate

#====================Source Code Auditing========================================================

    # https://github.com/WhaleShark-Team/cobra.git
    - name: "cobra Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/WhaleShark-Team/cobra.git
        - cd cobra && pip install -r requirements.txt
        - ./cobra.py --help
        - ./cobra.py -t tests/vulnerabilities
      after_success:
        - deactivate


    # https://github.com/wireghoul/graudit
    - name: "grep rough audit Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/wireghoul/graudit
        - ln -s ~/graudit/graudit ~/bin/graudit #symlink graudit  in the path
        - graudit -A
      after_success:
        - deactivate
        
#====================automated infrastructure========================================================
    # https://github.com/Coalfire-Research/Red-Baron
    - name: "Red-Baron Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/byt3bl33d3r/Red-Baron && cd Red-Baron
        - cp examples/complete_c2.tf .
        - terraform init
        - terraform plan
        - terraform apply
      after_success:
        - deactivate


    # https://github.com/stevenaldinger/decker.git
    - name: "decker. Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/stevenaldinger/decker.git
        - sudo make docker_build
        - sudo make docker_run
      after_success:
        - deactivate

    # https://github.com/rmikehodges/hideNsneak
    - name: "hideNsneak. Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/rmikehodges/hideNsneak.git
        - ./setup.sh
        - go build -o hideNsneak main.go
      after_success:
        - deactivate

    # https://github.com/khast3x/Redcloud
    - name: "Redcloud Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      env:
        global:
          - USERNAME_TAG=obscuritylabs
          - ASE_BASEIMAGE_TAG=ase
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - git clone https://github.com/khast3x/redcloud.git
        - cd redcloud && python redcloud.py
      after_success:
        - deactivate

    # https://github.com/obscuritylabs/RAI
    - name: "RAI Python 3.7 on bionic"
      dist: bionic
      services:
        - docker
      env:
        global:
          - USERNAME_TAG=obscuritylabs
          - ASE_BASEIMAGE_TAG=ase
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt        
      script:
        - sudo apt-get install build-essential
        - git clone https://github.com/obscuritylabs/RAI.git
        - cd ase_docker && docker-compose build --parallel
      after_success:
        - deactivate

    # - name: "chaos mesh  w snapped microk8s Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-chaosmesh
    #   after_success:
    #     - deactivate

    # - name: "jenkins configuration as code microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-ebpf
    #   after_success:
    #     - deactivate

    # - name: "ebpf testing microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-ebpf
    #   after_success:
    #     - deactivate

    # - name: "kubeflow addon microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-kubeflow
    #   after_success:
    #     - deactivate

    #   #dashboard: disabled ?
    # - name: "dashboard wo RBAC microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-dashboard
    #   after_success:
    #     - deactivate



    # - name: "juju microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-juju
    #   after_success:
    #     - deactivate

    #   # ingress: disabled?
    # - name: "ingress microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-ingress
    #   after_success:
    #     - deactivate

    #   # rbac: enabled dashboard: disabled?
    # - name: "dashboard w RBAC microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-dashboard-rbac
    #   after_success:
    #     - deactivate

#====================TESTED BEGINS========================================================
    #   # jaeger: enabled
    # - name: "jaeger microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-jaeger
    #   after_success:
    #     - deactivate

    #
    # # fluentd: enabled
    # - name: "Elasticsearch-Fluentd-Kibana microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-fluentd
    #   after_success:
    #     - deactivate
    #
    # # istio: enabled knative: enabled linkerd: disabled
    # - name: "serverless knative istio service mesh microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-istio-knative
    #   after_success:
    #     - deactivate
    #
    #   #Installing istio-1.5.1?
    #   # istio: enabled knative: enabled linkerd: enabled
    # - name: "serverless knative linkerd service mesh microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-linkerd-knative
    #   after_success:
    #     - deactivate
    #
    # #linkerd: enabled
    # - name: "linkerd service mesh microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic
    #         channel: latest/stable
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-linkerd
    #   after_success:
    #     - deactivate
    #
    # #istio: enabled
    # - name: "istio service mesh microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-istio
    #   after_success:
    #     - deactivate
    #
    # #cilium: enabled
    # - name: "cilium microk8s w snap Python 3.7 on bionic"
    #   dist: bionic
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #     - pip install -r requirements.txt
    #   script:
    #     - sudo make deploy-microk8s
    #     - sudo make deploy-cilium
    #   after_success:
    #     - deactivate

#====================TESTED ENDS========================================================

#============================================================================ multiarch linux ======================================================
#
#      #Running MicroK8s on some ARM hardware,Raspberry Pi/ARM
#     - name: "microk8s Python 3.7 on xenial arm64" #OK
#       os: linux
#       arch: arm64
#       dist: xenial
#       addons:
#         snaps:
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/beta # will be passed to --channel flag
#       language: python
#       python: 3.7
#       # env:
#       #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#       # compiler:
#       #  - gcc
#       #  - clang
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         - sudo microk8s stop
#         - sudo rm -rf /var/snap/microk8s/common/var/lib/containerd
#         - sudo ls -l /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo sed 's%snapshotter = "overlayfs"%snapshotter = "zfs"%g' /var/snap/microk8s/current/args/containerd-template.toml
#         # - sudo zfs create -o mountpoint=/var/snap/microk8s/common/var/lib/containerd/io.containerd.snapshotter.v1.zfs $POOL/containerd
#         - sudo microk8s start
#         - sudo microk8s status
#       after_success:
#         - deactivate
#
#
# #   # =============================================macOS=============================================
#
#     - name: "microk8s Python 2.7.17 on macOS 10.14.6osx xcode11.3"
#       os: osx
#       # osx_image: xcode11.5
#       osx_image:
#         - xcode11.5
#         - xcode11.4
#       language: shell
#       addons:
#         homebrew:
#           taps: homebrew/cask-versions #Installing From Taps
#           casks: java8
#       # addons:
#       #   homebrew:
#       #     casks:
#       #       - mactex
#       #     packages:
#       #       - multipass
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       # <<: *fleet_script_microk8s_macos_tasks
#       script:
#         - brew list --versions
#       after_success:
#         - deactivate
#
#
#
# #   # =============================================windows=============================================
#
#     # https://multipass.run/docs/installing-on-windows
#     # https://microk8s.io/#get-started
#     #https://docs.travis-ci.com/user/reference/windows/
#     - name: "microk8s Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_win_tasks
#       after_success:
#         - deactivate
