---
sudo: required
os: linux
arch:
  - amd64
  - arm64
dist:
  - xenial
  - bionic
env:
  global:
  # auto vagrant installation
  - VAGRANT_CURRENT_VERSION="$(curl -s https://checkpoint-api.hashicorp.com/v1/check/vagrant | jq -r -M '.current_version')"

notifications:
  slack:
    on_failure: always

#https://microk8s.io/#get-started
#https://microk8s.io/docs
#https://istio.io/docs/setup/platform-setup/microk8s/
fleet_script_microk8s_linkerd_knative_tasks : &fleet_script_microk8s_linkerd_knative_tasks #If you are running minikube within a VM, consider using --driver=none
      script:
          - sudo snap install microk8s --classic --channel=1.18/stable
          - sudo usermod -a -G microk8s $USER #add your current user to the group and gain access to the .kube caching directory
          # - sudo chown -f -R $USER ~/.kube
          # - su - $USER # re-enter the session for the group update to take place
          - sudo microk8s status --wait-ready #Check the status
          - sudo microk8s kubectl get nodes
          - sudo microk8s kubectl get services
          # - alias kubectl='microk8s kubectl' #add an alias (append to ~/.bash_aliases)
          - sudo microk8s  kubectl create deployment my-dep --image=busybox
          - sudo microk8s kubectl get pods #Check the status
          - sudo microk8s status --wait-ready
          - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress linkerd jaeger knative kubeflow metrics-server prometheus rbac registry storage#Use add-ons linkerd
          # - microk8s stop
          # - microk8s start
          # - sudo microk8s enable dns dashboard registry #Turn on standard services
          # - watch microk8s.kubectl get all --all-namespaces #check deployment progress
          - echo "=========================================================================================="
          - sudo microk8s kubectl version
          - sudo microk8s kubectl version --client #the version of the client
          - sudo microk8s kubectl cluster-info
          - echo "=========================================================================================="
          - |
            echo "Waiting for Kubernetes to be ready ..."
            for i in {1..150}; do # Timeout after 5 minutes, 150x2=300 secs
              if sudo microk8s kubectl get pods --namespace=kube-system | grep Running ; then
                break
              fi
              sleep 2
            done
          - sudo microk8s kubectl get all --all-namespaces
          - sudo microk8s kubectl run nginx --image nginx --replicas 3
          - sudo microk8s kubectl get all --all-namespaces

#https://microk8s.io/#get-started
#https://microk8s.io/docs
#https://istio.io/docs/setup/platform-setup/microk8s/
fleet_script_microk8s_linkerd_tasks : &fleet_script_microk8s_linkerd_tasks #If you are running minikube within a VM, consider using --driver=none
      script:
          - sudo snap install microk8s --classic --channel=1.18/stable
          - sudo usermod -a -G microk8s $USER #add your current user to the group and gain access to the .kube caching directory
          # - sudo chown -f -R $USER ~/.kube
          # - su - $USER # re-enter the session for the group update to take place
          - sudo microk8s status --wait-ready #Check the status
          - sudo microk8s kubectl get nodes
          - sudo microk8s kubectl get services
          # - alias kubectl='microk8s kubectl' #add an alias (append to ~/.bash_aliases)
          - sudo microk8s  kubectl create deployment my-dep --image=busybox
          - sudo microk8s kubectl get pods #Check the status
          - sudo microk8s status --wait-ready
          - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress linkerd jaeger knative kubeflow metrics-server prometheus rbac registry storage#Use add-ons linkerd
          # - microk8s stop
          # - microk8s start
          # - sudo microk8s enable dns dashboard registry #Turn on standard services
          # - watch microk8s.kubectl get all --all-namespaces #check deployment progress
          - echo "=========================================================================================="
          - sudo microk8s kubectl version
          - sudo microk8s kubectl version --client #the version of the client
          - sudo microk8s kubectl cluster-info
          - echo "=========================================================================================="
          - |
            echo "Waiting for Kubernetes to be ready ..."
            for i in {1..150}; do # Timeout after 5 minutes, 150x2=300 secs
              if sudo microk8s kubectl get pods --namespace=kube-system | grep Running ; then
                break
              fi
              sleep 2
            done
          - sudo microk8s kubectl get all --all-namespaces
          - sudo microk8s kubectl run nginx --image nginx --replicas 3
          - sudo microk8s kubectl get all --all-namespaces


fleet_script_microk8s_istio_tasks : &fleet_script_microk8s_istio_tasks #If you are running minikube within a VM, consider using --driver=none
      script:
          # - sudo snap install microk8s --classic --channel=1.18/stable
          - sudo usermod -a -G microk8s $USER #add your current user to the group and gain access to the .kube caching directory
          # - sudo chown -f -R $USER ~/.kube
          # - su - $USER # re-enter the session for the group update to take place
          - sudo microk8s status --wait-ready #Check the status
          - |
            echo "Waiting for Kubernetes to be ready ..."
            for i in {1..150}; do # Timeout after 5 minutes, 150x2=300 secs
              watch -d sudo microk8s kubectl get all --all-namespaces
              sleep 2
            done
          - sudo microk8s kubectl get nodes
          - sudo microk8s kubectl get services
          # - alias kubectl='microk8s kubectl' #add an alias (append to ~/.bash_aliases)
          # - sudo microk8s  kubectl create deployment my-dep --image=busybox
          - sudo microk8s kubectl get pods #Check the status
          - yes | sudo microk8s enable istio     #Enforce mutual TLS authentication (https://bit.ly/2KB4j04) between sidecars? If unsure, choose N. (y/N):
          #Istio needs to inject sidecars to the pods of your deployment
          #In microk8s auto-injection is supported  label the namespace you will be using with istion-injection=enabled
          - sudo microk8s kubectl label namespace default istio-injection=enabled
          - wget https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/platform/kube/bookinfo.yaml  #the bookinfo example from the v1.0 Istio release
          - sudo microk8s.kubectl create -f bookinfo.yaml
          #reach the services using the ClusterIP they have
          #for example get to the productpage in the above example by pointing our browser to 10.152.183.59:9080
          - sudo microk8s kubectl get svc
          - wget https://raw.githubusercontent.com/istio/istio/release-1.0/samples/bookinfo/networking/bookinfo-gateway.yaml #exposing the services via NodePort:
          - sudo microk8s kubectl -n istio-system get service istio-ingressgateway -o jsonpath='{.spec.ports[?(@.name=="http2")].nodePort}' 31380 #get to the productpage through ingress
          - curl http://localhost:31380/productpage
          # - nc http://localhost:31380/productpage
          - sudo microk8s kubectl -n istio-system get svc grafana
          - sudo microk8s kubectl -n istio-system get svc prometheus
          - sudo microk8s kubectl -n istio-system get service/jaeger-query
          - sudo microk8s kubectl -n istio-system get servicegraph
          # -  sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress istio jaeger knative kubeflow metallb metrics-server prometheus rbac registry storage #Use add-ons istio
          # - microk8s stop
          # - microk8s start
          # - sudo microk8s enable dns dashboard registry #Turn on standard services
          # - watch microk8s.kubectl get all --all-namespaces #check deployment progress
          - echo "=========================================================================================="
          - sudo microk8s kubectl version
          - sudo microk8s kubectl version --client #the version of the client
          - sudo microk8s kubectl cluster-info
          - echo "=========================================================================================="
          - |
            echo "Waiting for Kubernetes to be ready ..."
            for i in {1..150}; do # Timeout after 5 minutes, 150x2=300 secs
              if sudo microk8s kubectl get pods --namespace=kube-system | grep Running ; then
                break
              fi
              sleep 2
            done
          - sudo microk8s kubectl get all --all-namespaces
          - sudo microk8s kubectl run nginx --image nginx --replicas 3
          - sudo microk8s kubectl get all --all-namespaces

fleet_script_microk8s_cilium_tasks : &fleet_script_microk8s_cilium_tasks #If you are running minikube within a VM, consider using --driver=none
      script:
          - sudo snap install microk8s --classic --channel=1.18/stable
          - sudo usermod -a -G microk8s $USER #add your current user to the group and gain access to the .kube caching directory
          # - sudo chown -f -R $USER ~/.kube
          # - su - $USER # re-enter the session for the group update to take place
          - sudo microk8s status --wait-ready #Check the status
          - sudo microk8s kubectl get nodes
          - sudo microk8s kubectl get services
          # - alias kubectl='microk8s kubectl' #add an alias (append to ~/.bash_aliases)
          - sudo microk8s  kubectl create deployment my-dep --image=busybox
          - sudo microk8s kubectl get pods #Check the status
          - sudo microk8s status --wait-ready
          - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress jaeger kubeflow metallb metrics-server prometheus rbac registry storage #Use add-ons istio
          # - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress istio jaeger knative kubeflow metallb metrics-server prometheus rbac registry storage #Use add-ons istio
          # - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress linkerd jaeger knative kubeflow metrics-server prometheus rbac registry storage#Use add-ons linkerd
          # - microk8s stop
          # - microk8s start
          # - sudo microk8s enable dns dashboard registry #Turn on standard services
          # - watch microk8s.kubectl get all --all-namespaces #check deployment progress
          - echo "=========================================================================================="
          - sudo microk8s kubectl version
          - sudo microk8s kubectl version --client #the version of the client
          - sudo microk8s kubectl cluster-info
          - echo "=========================================================================================="
          - |
            echo "Waiting for Kubernetes to be ready ..."
            for i in {1..150}; do # Timeout after 5 minutes, 150x2=300 secs
              if sudo microk8s kubectl get pods --namespace=kube-system | grep Running ; then
                break
              fi
              sleep 2
            done
          - sudo microk8s kubectl get all --all-namespaces
          - sudo microk8s kubectl run nginx --image nginx --replicas 3
          - sudo microk8s kubectl get all --all-namespaces




fleet_script_microk8s_tasks : &fleet_script_microk8s_tasks #If you are running minikube within a VM, consider using --driver=none
      script:
          # - sudo snap install microk8s --classic --channel=1.18/stable
          - sudo usermod -a -G microk8s $USER #add your current user to the group and gain access to the .kube caching directory
          # - sudo chown -f -R $USER ~/.kube
          # - su - $USER # re-enter the session for the group update to take place
          - sudo microk8s status --wait-ready #Check the status
          - sudo microk8s kubectl get nodes
          - sudo microk8s kubectl get services
          # - alias kubectl='microk8s kubectl' #add an alias (append to ~/.bash_aliases)
          - sudo microk8s  kubectl create deployment my-dep --image=busybox
          - sudo microk8s kubectl get pods #Check the status
          - sudo microk8s status --wait-ready
          - yes | sudo microk8s enable istio     #Enforce mutual TLS authentication (https://bit.ly/2KB4j04) between sidecars? If unsure, choose N. (y/N):
          #kubeflow hanging
          # Enabling MetalLB
          # Enter the IP address range (e.g., 10.64.140.43-10.64.140.49):
          # - echo"10.64.140.43-10.64.140.49" | sudo microk8s enable metallb
          - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress jaeger knative metrics-server prometheus rbac registry storage #Use add-ons,services
          # - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress jaeger knative metallb metrics-server prometheus rbac registry storage #Use add-ons,services
          # - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress jaeger knative kubeflow metallb metrics-server prometheus rbac registry storage #Use add-ons,services
          # - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress istio jaeger knative kubeflow metallb metrics-server prometheus rbac registry storage #Use add-ons istio
          # - sudo microk8s enable dns cilium dashboard fluentd helm helm3 ingress linkerd jaeger knative kubeflow metrics-server prometheus rbac registry storage#Use add-ons linkerd
          # - microk8s stop
          # - microk8s start
          # - sudo microk8s enable dns dashboard registry #Turn on standard services
          # - watch microk8s.kubectl get all --all-namespaces #check deployment progress
          - echo "=========================================================================================="
          - sudo microk8s kubectl version
          - sudo microk8s kubectl version --client #the version of the client
          - sudo microk8s kubectl cluster-info
          - echo "=========================================================================================="
          - |
            echo "Waiting for Kubernetes to be ready ..."
            for i in {1..150}; do # Timeout after 5 minutes, 150x2=300 secs
              if sudo microk8s kubectl get pods --namespace=kube-system | grep Running ; then
                break
              fi
              sleep 2
            done
          - sudo microk8s kubectl get all --all-namespaces
          - sudo microk8s kubectl run nginx --image nginx --replicas 3
          - sudo microk8s kubectl get all --all-namespaces


fleet_script_tasks : &fleet_script_tasks
      script:
        - python --version
fleet_install_tasks : &fleet_install_tasks
      install:
        - pip install -r requirements.txt


matrix:
  fast_finish: true
  include:

    - name: "microk8s Python 3.7 on bionic" #
      # dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
      <<: *fleet_install_tasks
      <<: *fleet_script_tasks
      <<: *fleet_script_microk8s_tasks
      after_success:
        - deactivate

    # - name: "microk8s Python 3.7 on xenial" #OK
    #   dist: xenial
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/stable # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   <<: *fleet_script_microk8s_tasks
    #   after_success:
    #     - deactivate


# #============================================================================ multiarch linux ============================================================================

    #  #Running MicroK8s on some ARM hardware,Raspberry Pi/ARM
    # - name: "microk8s Python 3.7 on xenial arm64" #OK
    #   os: linux
    #   arch: arm64
    #   dist: xenial
    #   addons:
    #     snaps:
    #       - name: microk8s
    #         confinement: classic # or devmode
    #         channel: latest/beta # will be passed to --channel flag
    #   language: python
    #   python: 3.7
    #   # env:
    #   #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
    #   # compiler:
    #   #  - gcc
    #   #  - clang
    #   before_install:
    #     - pip3 install virtualenv
    #     - virtualenv -p $(which python3) ~venvpy3
    #     - source ~venvpy3/bin/activate
    #   <<: *fleet_install_tasks
    #   <<: *fleet_script_tasks
    #   script:
    #     - sudo microk8s stop
    #     - sudo rm -rf /var/snap/microk8s/common/var/lib/containerd
    #     - sudo ls -l /var/snap/microk8s/current/args/containerd-template.toml
    #     - sudo sed 's%snapshotter = "overlayfs"%snapshotter = "zfs"%g' /var/snap/microk8s/current/args/containerd-template.toml
    #     # - sudo zfs create -o mountpoint=/var/snap/microk8s/common/var/lib/containerd/io.containerd.snapshotter.v1.zfs $POOL/containerd
    #     - sudo microk8s start
    #     - sudo microk8s status
    #   after_success:
    #     - deactivate
