---
sudo: required
dist: bionic

notifications:
  slack:
    on_failure: always

matrix:
  fast_finish: true
  include:

    - name: "kubeflow addon microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-kubeflow
      after_success:
        - deactivate

        
    - name: "jaeger microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-jaeger
      after_success:
        - deactivate

      #dashboard: disabled ?
    - name: "dashboard wo RBAC microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-dashboard
      after_success:
        - deactivate

    # istio: enabled knative: enabled linkerd: disabled
    - name: "serverless knative istio service mesh microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-istio-knative
      after_success:
        - deactivate

    - name: "juju microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-juju
      after_success:
        - deactivate

      # ingress: disabled?
    - name: "ingress microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-ingress
      after_success:
        - deactivate

      # rbac: enabled dashboard: disabled?
    - name: "dashboard w RBAC microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-dashboard-rbac
      after_success:
        - deactivate



    - name: "Elasticsearch-Fluentd-Kibana microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-fluentd
      after_success:
        - deactivate

#============================================================================

      #Installing istio-1.5.1?
      # istio: enabled knative: enabled linkerd: enabled
    - name: "serverless knative linkerd service mesh microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-linkerd-knative
      after_success:
        - deactivate

    - name: "linkerd service mesh microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic
            channel: latest/stable
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-linkerd
      after_success:
        - deactivate

    - name: "istio service mesh microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-istio
      after_success:
        - deactivate

    - name: "cilium microk8s w snap Python 3.7 on bionic"
      dist: bionic
      addons:
        snaps:
          - name: microk8s
            confinement: classic # or devmode
            channel: latest/stable # will be passed to --channel flag
      language: python
      python: 3.7
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo make deploy-microk8s
        - sudo make deploy-cilium
      after_success:
        - deactivate

#============================================================================
#
#     - name: "microk8s Python 3.7 on bionic" #
#       dist: bionic
#       addons:
#         snaps:
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_tasks
#       after_success:
#         - deactivate
#
#     - name: "microk8s Python 3.7 on xenial" #OK
#       dist: xenial
#       addons:
#         snaps:
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#       language: python
#       python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_tasks
#       after_success:
#         - deactivate
#
#
# # #============================================================================ multiarch linux ============================================================================
#
#      #Running MicroK8s on some ARM hardware,Raspberry Pi/ARM
#     - name: "microk8s Python 3.7 on xenial arm64" #OK
#       os: linux
#       arch: arm64
#       dist: xenial
#       addons:
#         snaps:
#           - name: microk8s
#             confinement: classic # or devmode
#             channel: latest/beta # will be passed to --channel flag
#       language: python
#       python: 3.7
#       # env:
#       #   - LIB_PATH="/usr/bin/shared/x86_64/v1"
#       # compiler:
#       #  - gcc
#       #  - clang
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       script:
#         - sudo microk8s stop
#         - sudo rm -rf /var/snap/microk8s/common/var/lib/containerd
#         - sudo ls -l /var/snap/microk8s/current/args/containerd-template.toml
#         - sudo sed 's%snapshotter = "overlayfs"%snapshotter = "zfs"%g' /var/snap/microk8s/current/args/containerd-template.toml
#         # - sudo zfs create -o mountpoint=/var/snap/microk8s/common/var/lib/containerd/io.containerd.snapshotter.v1.zfs $POOL/containerd
#         - sudo microk8s start
#         - sudo microk8s status
#       after_success:
#         - deactivate
#
#
# #   # =============================================macOS=============================================
#
#     - name: "microk8s Python 2.7.17 on macOS 10.14.6osx xcode11.3"
#       os: osx
#       # osx_image: xcode11.5
#       osx_image:
#         - xcode11.5
#         - xcode11.4
#       language: shell
#       addons:
#         homebrew:
#           taps: homebrew/cask-versions #Installing From Taps
#           casks: java8
#       # addons:
#       #   homebrew:
#       #     casks:
#       #       - mactex
#       #     packages:
#       #       - multipass
#       before_install:
#         - pip install virtualenv
#         - virtualenv -p $(which python2) ~venvpy2
#         - source ~venvpy2/bin/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       # <<: *fleet_script_microk8s_macos_tasks
#       script:
#         - brew list --versions
#       after_success:
#         - deactivate
#
#
#
# #   # =============================================windows=============================================
#
#     # https://multipass.run/docs/installing-on-windows
#     # https://microk8s.io/#get-started
#     #https://docs.travis-ci.com/user/reference/windows/
#     - name: "microk8s Python 3.8 on Windows"
#       os: windows
#       language: shell
#       env:
#         - PATH=/c/Python38:/c/Python38/Scripts:$PATH
#       before_install:
#         - choco install python --version 3.8.1
#         - pip install virtualenv
#         - virtualenv $HOME/venv
#         - source $HOME/venv/Scripts/activate
#       <<: *fleet_install_tasks
#       <<: *fleet_script_tasks
#       <<: *fleet_script_microk8s_win_tasks
#       after_success:
#         - deactivate
